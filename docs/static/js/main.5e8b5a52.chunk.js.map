{"version":3,"sources":["Header.js","SwipeButtons.js","TinderCards.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","IconButton","fontSize","src","SwipeButtons","TinderCards","useState","people","setPeople","useEffect","a","axios","get","req","data","fetchData","length","map","person","key","name","preventSwipe","onSwipe","dir","console","log","onCardLeftScreen","style","backgroundImage","img","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wVAsBeA,MAjBf,WACI,OACI,yBAAKC,UAAU,UACX,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAYC,SAAS,QAAQF,UAAU,kBAE3C,yBACIG,IAAI,mFACJH,UAAU,iBAEd,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWC,SAAS,QAAQF,UAAU,oB,6FCyBvCI,MAhCf,WACI,OACI,yBAAKJ,UAAU,gBACX,kBAACC,EAAA,EAAD,CACID,UAAU,wBAEV,kBAAC,IAAD,CAAYE,SAAS,WAEzB,kBAACD,EAAA,EAAD,CACID,UAAU,sBAEV,kBAAC,IAAD,CAAWE,SAAS,WAExB,kBAACD,EAAA,EAAD,CACID,UAAU,sBAEV,kBAAC,IAAD,CAAcE,SAAS,WAE3B,kBAACD,EAAA,EAAD,CACID,UAAU,uBAEV,kBAAC,IAAD,CAAcE,SAAS,WAE3B,kBAACD,EAAA,EAAD,CACID,UAAU,2BAEV,kBAAC,IAAD,CAAaE,SAAS,a,2ECSvBG,MAxCf,WAAwB,IAAD,EACSC,mBAAS,IADlB,mBACZC,EADY,KACJC,EADI,KAenB,OAbAC,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEACIC,IAAMC,IAAI,eADd,OACRC,EADQ,OAEdL,EAAUK,EAAIC,MAFA,2CAAH,qDAIfC,KACD,IAQC,yBAAKf,UAAU,eACX,yBAAKA,UAAU,8BACVO,EAAOS,OAAS,GAAKT,EAAOU,KAAI,SAACC,GAAD,OAC7B,kBAAC,IAAD,CACIlB,UAAU,QACVmB,IAAKD,EAAOE,KACZC,aAAc,CAAC,KAAM,QACrBC,QAAS,SAACC,GAAD,OAAqBL,EAAOE,UAbrDI,QAAQC,IAAI,WAcIC,iBAAkB,kBAAiBR,EAAOE,UAX1DI,QAAQC,IAAI,gBAaI,yBACIE,MAAO,CAAEC,gBAAgB,OAAD,OAASV,EAAOW,IAAhB,MACxB7B,UAAU,QAEV,4BAAKkB,EAAOE,cClBzBU,MAVf,WACE,OACE,yBAAK9B,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.5e8b5a52.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Header.css\"\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport { IconButton } from '@material-ui/core';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <IconButton>\r\n                <PersonIcon fontSize=\"large\" className=\"header__icon\"/>\r\n            </IconButton>\r\n            <img \r\n                src=\"https://w7.pngwing.com/pngs/698/493/png-transparent-tinder-hd-logo-thumbnail.png\"\r\n                className=\"header__logo\"\r\n            />\r\n            <IconButton>\r\n                <ForumIcon fontSize=\"large\" className=\"header__icon\"/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport \"./SwipeButtons.css\"\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport StarRateIcon from '@material-ui/icons/StarRate';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nfunction SwipeButtons() {\r\n    return (\r\n        <div className=\"swipeButtons\">\r\n            <IconButton  \r\n                className=\"swipeButtons__repeat\"\r\n            >\r\n                <ReplayIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton  \r\n                className=\"swipeButtons__left\"\r\n            >\r\n                <CloseIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton  \r\n                className=\"swipeButtons__star\"\r\n            >\r\n                <StarRateIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton  \r\n                className=\"swipeButtons__right\"\r\n            >\r\n                <FavoriteIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton  \r\n                className=\"swipeButtons__lightning\"\r\n            >\r\n                <FlashOnIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwipeButtons\r\n","import React, { useEffect, useState } from 'react'\r\nimport TinderCard from 'react-tinder-card'\r\nimport \"./TinderCards.css\"\r\nimport axios from \"axios\"\r\nfunction TinderCards() {\r\n    const [people, setPeople] = useState([])\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const req = await axios.get(\"./data.json\")\r\n            setPeople(req.data)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    const swiped = (dir, nameToDelete) => {\r\n        console.log(\"swiped\")\r\n    }\r\n    const outOfFrame = (name) => {\r\n        console.log(\"outOfFrame\")\r\n    }\r\n    return (\r\n        <div className=\"tinderCards\">\r\n            <div className=\"tinderCards__cardContainer\">\r\n                {people.length > 0 && people.map((person) => (\r\n                    <TinderCard\r\n                        className=\"swipe\"\r\n                        key={person.name}\r\n                        preventSwipe={[\"up\", \"down\"]}\r\n                        onSwipe={(dir) => swiped(dir, person.name)}\r\n                        onCardLeftScreen={() => outOfFrame(person.name)}\r\n                    >\r\n                        <div\r\n                            style={{ backgroundImage: `url(${person.img})` }}\r\n                            className=\"card\"\r\n                        >\r\n                            <h3>{person.name}</h3>\r\n                        </div>\r\n                    </TinderCard>\r\n                ))}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TinderCards\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport SwipeButtons from './SwipeButtons';\r\nimport TinderCards from './TinderCards';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n        <Header />\r\n        <TinderCards />\r\n        <SwipeButtons />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}